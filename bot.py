from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import requests

TOKEN = '7594465048:AAEqLZ5AUcT0UszShIE1W3PxdpSjZzQnqgY'
ADMIN_ID = 7595576719  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
YOOMONEY_WALLET = '4100118963292219'
YOOMONEY_TOKEN = '1A5DD0EBF5CA1773F43BE694D31FB4670EACA80B06EB40CD4562D849A1A9DCCD4E3DC6282922E61826B71ED3219C904554467C0F91222760AB939AAD75F11F79'

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class OrderStars(StatesGroup):
    waiting_for_name = State()
    waiting_for_quantity = State()
    waiting_for_payment = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã"), KeyboardButton("üéÅ –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"))
main_menu.add(KeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã"), KeyboardButton("üßë‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"))
main_menu.add(KeyboardButton("üíµ –ü—Ä–∞–π—Å –∑–≤—ë–∑–¥—ã"), KeyboardButton("üíµ –ü—Ä–∞–π—Å –ø–æ–¥–∞—Ä–∫–∏"))
main_menu.add(KeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã"))

admin_menu = ReplyKeyboardMarkup(resize_keyboard=True)
admin_menu.add(KeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É"))
admin_menu.add(KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"))

orders = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!", reply_markup=admin_menu)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–≤—ë–∑–¥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "üí≥ –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã")
async def buy_stars(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="order_stars"))
    await message.answer("–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "order_stars")
async def order_stars(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:")
    await OrderStars.waiting_for_name.set()
    await call.answer()

@dp.message_handler(state=OrderStars.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?")
    await OrderStars.waiting_for_quantity.set()

@dp.message_handler(state=OrderStars.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    if int(message.text) < 50:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ‚Äî 50!")
        return
    await state.update_data(quantity=message.text)
    user_data = await state.get_data()
    payment_link = f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YOOMONEY_WALLET}&sum={int(message.text)}&paymentType=AC&label={message.chat.id}"
    await message.answer(f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
    await OrderStars.waiting_for_payment.set()

async def check_payment(label):
    headers = {"Authorization": f"Bearer {YOOMONEY_TOKEN}"}
    response = requests.get("https://yoomoney.ru/api/operation-history", headers=headers, params={"label": label, "records": 1})
    if response.status_code == 200:
        operations = response.json().get("operations", [])
        if operations:
            return True
    return False

@dp.message_handler(state=OrderStars.waiting_for_payment, content_types=types.ContentType.PHOTO)
async def process_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data['name']
    quantity = user_data['quantity']
    username = message.from_user.username if message.from_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'
    label = str(message.chat.id)
    if await check_payment(label):
        orders[message.chat.id] = {'name': name, 'quantity': quantity}
        await bot.send_message(ADMIN_ID, f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–ò–º—è: {name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {quantity}\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}")
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        await state.finish()
    else:
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
